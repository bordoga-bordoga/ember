### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Guild {
  id: String!
  prefix: String
  savedUsers(after: MemberWhereUniqueInput, before: MemberWhereUniqueInput, first: Int, last: Int): [Member!]!
  welcome: String
}

input GuildCreateInput {
  id: String!
  prefix: String
  savedUsers: MemberCreateManyWithoutGuildInput
  welcome: String
}

input GuildCreateOneWithoutSavedUsersInput {
  connect: GuildWhereUniqueInput
  connectOrCreate: GuildCreateOrConnectWithoutsavedUsersInput
  create: GuildCreateWithoutSavedUsersInput
}

input GuildCreateOrConnectWithoutsavedUsersInput {
  create: GuildCreateWithoutSavedUsersInput!
  where: GuildWhereUniqueInput!
}

input GuildCreateWithoutSavedUsersInput {
  id: String!
  prefix: String
  welcome: String
}

input GuildUpdateInput {
  id: StringFieldUpdateOperationsInput
  prefix: NullableStringFieldUpdateOperationsInput
  savedUsers: MemberUpdateManyWithoutGuildInput
  welcome: NullableStringFieldUpdateOperationsInput
}

input GuildUpdateOneWithoutSavedUsersInput {
  connect: GuildWhereUniqueInput
  connectOrCreate: GuildCreateOrConnectWithoutsavedUsersInput
  create: GuildCreateWithoutSavedUsersInput
  delete: Boolean
  disconnect: Boolean
  update: GuildUpdateWithoutSavedUsersInput
  upsert: GuildUpsertWithoutSavedUsersInput
}

input GuildUpdateWithoutSavedUsersInput {
  id: StringFieldUpdateOperationsInput
  prefix: NullableStringFieldUpdateOperationsInput
  welcome: NullableStringFieldUpdateOperationsInput
}

input GuildUpsertWithoutSavedUsersInput {
  create: GuildCreateWithoutSavedUsersInput!
  update: GuildUpdateWithoutSavedUsersInput!
}

input GuildWhereUniqueInput {
  id: String
}

scalar Json

input JsonNullableFilter {
  equals: Json
  not: Json
}

type Member {
  Guild: Guild
  guildId: String
  id: String!
  member: Json
}

input MemberCreateInput {
  Guild: GuildCreateOneWithoutSavedUsersInput
  id: String!
  member: Json
}

input MemberCreateManyWithoutGuildInput {
  connect: [MemberWhereUniqueInput!]
  connectOrCreate: [MemberCreateOrConnectWithoutGuildInput!]
  create: [MemberCreateWithoutGuildInput!]
}

input MemberCreateOrConnectWithoutGuildInput {
  create: MemberCreateWithoutGuildInput!
  where: MemberWhereUniqueInput!
}

input MemberCreateWithoutGuildInput {
  id: String!
  member: Json
}

input MemberScalarWhereInput {
  AND: [MemberScalarWhereInput!]
  guildId: StringNullableFilter
  id: StringFilter
  member: JsonNullableFilter
  NOT: [MemberScalarWhereInput!]
  OR: [MemberScalarWhereInput!]
}

input MemberUpdateInput {
  Guild: GuildUpdateOneWithoutSavedUsersInput
  id: StringFieldUpdateOperationsInput
  member: Json
}

input MemberUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  member: Json
}

input MemberUpdateManyWithoutGuildInput {
  connect: [MemberWhereUniqueInput!]
  connectOrCreate: [MemberCreateOrConnectWithoutGuildInput!]
  create: [MemberCreateWithoutGuildInput!]
  delete: [MemberWhereUniqueInput!]
  deleteMany: [MemberScalarWhereInput!]
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  update: [MemberUpdateWithWhereUniqueWithoutGuildInput!]
  updateMany: [MemberUpdateManyWithWhereWithoutGuildInput!]
  upsert: [MemberUpsertWithWhereUniqueWithoutGuildInput!]
}

input MemberUpdateManyWithWhereWithoutGuildInput {
  data: MemberUpdateManyMutationInput!
  where: MemberScalarWhereInput!
}

input MemberUpdateWithoutGuildInput {
  id: StringFieldUpdateOperationsInput
  member: Json
}

input MemberUpdateWithWhereUniqueWithoutGuildInput {
  data: MemberUpdateWithoutGuildInput!
  where: MemberWhereUniqueInput!
}

input MemberUpsertWithWhereUniqueWithoutGuildInput {
  create: MemberCreateWithoutGuildInput!
  update: MemberUpdateWithoutGuildInput!
  where: MemberWhereUniqueInput!
}

input MemberWhereUniqueInput {
  id: String
}

type Mutation {
  createOneGuild(data: GuildCreateInput!): Guild!
  createOneMember(data: MemberCreateInput!): Member!
  deleteOneGuild(where: GuildWhereUniqueInput!): Guild
  deleteOneMember(where: MemberWhereUniqueInput!): Member
  updateOneGuild(data: GuildUpdateInput!, where: GuildWhereUniqueInput!): Guild
  updateOneMember(data: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member
  upsertOneGuild(create: GuildCreateInput!, update: GuildUpdateInput!, where: GuildWhereUniqueInput!): Guild!
  upsertOneMember(create: MemberCreateInput!, update: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member!
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  guild(where: GuildWhereUniqueInput!): Guild
  guilds(after: GuildWhereUniqueInput, before: GuildWhereUniqueInput, first: Int, last: Int): [Guild!]!
  member(where: MemberWhereUniqueInput!): Member
  members(after: MemberWhereUniqueInput, before: MemberWhereUniqueInput, first: Int, last: Int): [Member!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  blacklistReason: String
  id: String!
}

input UserWhereUniqueInput {
  id: String
}
